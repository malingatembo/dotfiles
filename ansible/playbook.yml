---
# Dotfiles Deployment Playbook
# Deploys dotfiles across Ubuntu and Fedora systems

- name: Deploy dotfiles configuration
  hosts: all
  become: false

  vars:
    dotfiles_dir: "{{ ansible_env.HOME }}/dotfiles"
    backup_dir: "{{ ansible_env.HOME }}/.dotfiles_backup_{{ ansible_date_time.epoch }}"

  tasks:
    - name: Display deployment info
      debug:
        msg: "Deploying dotfiles from {{ dotfiles_dir }} on {{ ansible_os_family }} system"

    # Package Installation
    - name: Install required packages on Ubuntu/Debian
      apt:
        name:
          - tmux
          - vim
          - neovim
          - curl
          - git
          - fonts-powerline
          - python3
          - python3-pip
          - python3-dev
          - python3-setuptools
          - build-essential
        state: present
        update_cache: true
      become: true
      when: ansible_os_family == "Debian"
      tags: packages

    - name: Install required packages on Fedora/RedHat
      dnf:
        name:
          - tmux
          - vim
          - neovim
          - curl
          - git
          - powerline-fonts
          - python3
          - python3-pip
          - python3-devel
          - python3-setuptools
          - gcc
          - gcc-c++
        state: present
      become: true
      when: ansible_os_family == "RedHat"
      tags: packages

    # Python packages for Vim plugins
    - name: Install Python packages for Vim plugins
      pip:
        name:
          - black
          - jedi
          - pylint
          - flake8
        executable: pip3
        extra_args: --user
      tags: packages

    # Backup existing dotfiles
    - name: Create backup directory
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      tags: backup

    - name: Check for existing dotfiles
      stat:
        path: "{{ ansible_env.HOME }}/{{ item }}"
      register: dotfile_stats
      loop:
        - .bashrc
        - .bash_profile
        - .vimrc
        - .tmux.conf
      tags: backup

    - name: Backup existing dotfiles
      copy:
        src: "{{ ansible_env.HOME }}/{{ item.item }}"
        dest: "{{ backup_dir }}/{{ item.item }}"
        mode: preserve
        remote_src: true
      when: item.stat.exists and not item.stat.islnk
      loop: "{{ dotfile_stats.results }}"
      tags: backup

    - name: Display backup location
      debug:
        msg: "Backed up existing dotfiles to {{ backup_dir }}"
      when: dotfile_stats.results | selectattr('stat.exists') | list | length > 0
      tags: backup

    # Remove old symlinks
    - name: Remove old symlinks if they exist
      file:
        path: "{{ ansible_env.HOME }}/{{ item }}"
        state: absent
      when: dotfile_stats.results[loop_index].stat.islnk is defined and dotfile_stats.results[loop_index].stat.islnk
      loop:
        - .bashrc
        - .bash_profile
        - .vimrc
        - .tmux.conf
      loop_control:
        index_var: loop_index
      tags: symlinks

    # Create symlinks
    - name: Create symlinks for dotfiles
      file:
        src: "{{ dotfiles_dir }}/{{ item }}"
        dest: "{{ ansible_env.HOME }}/{{ item }}"
        state: link
        force: true
      loop:
        - .bashrc
        - .bash_profile
        - .vimrc
        - .tmux.conf
      tags: symlinks

    # Vim setup
    - name: Check if vim-plug is installed
      stat:
        path: "{{ ansible_env.HOME }}/.vim/autoload/plug.vim"
      register: vim_plug_stat
      tags: vim

    - name: Install vim-plug
      shell: curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      when: not vim_plug_stat.stat.exists
      tags: vim

    - name: Create vim directories
      file:
        path: "{{ ansible_env.HOME }}/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - .vim/plugged
        - .vim/autoload
      tags: vim

    - name: Install Vim plugins (may take a few minutes)
      shell: vim +PlugInstall +qall
      register: vim_plugin_install
      changed_when: true
      tags: vim

    - name: Update Vim plugins
      shell: vim +PlugUpdate +qall
      ignore_errors: true
      tags: vim

    - name: Display Vim setup status
      debug:
        msg:
          - "Vim setup complete with enhanced status line (vim-airline)"
          - "Installed plugins: NERDTree, vim-airline, jedi-vim, black, syntastic, and more"
          - "Python support enabled for jedi-vim and black formatter"
      tags: vim

    # Tmux setup
    - name: Check if TPM is installed
      stat:
        path: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
      register: tpm_stat
      tags: tmux

    - name: Clone Tmux Plugin Manager (TPM)
      git:
        repo: https://github.com/tmux-plugins/tpm
        dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
        version: master
      when: not tpm_stat.stat.exists
      tags: tmux

    - name: Check if tmux plugins are installed
      stat:
        path: "{{ ansible_env.HOME }}/.tmux/plugins/tmux-resurrect"
      register: tmux_plugins_stat
      tags: tmux

    - name: Install Tmux plugins using TPM
      command:
        cmd: "{{ ansible_env.HOME }}/.tmux/plugins/tpm/bin/install_plugins"
      when: not tmux_plugins_stat.stat.exists
      tags: tmux

    # Git setup - check for git-prompt.sh
    - name: Check if git-prompt.sh exists
      stat:
        path: "{{ ansible_env.HOME }}/.git-prompt.sh"
      register: git_prompt_stat
      tags: git

    - name: Download git-prompt.sh
      get_url:
        url: https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh
        dest: "{{ ansible_env.HOME }}/.git-prompt.sh"
        mode: '0644'
      when: not git_prompt_stat.stat.exists
      tags: git

    # Summary
    - name: Deployment summary
      debug:
        msg:
          - "=========================================="
          - "   Dotfiles Deployment Complete!"
          - "=========================================="
          - ""
          - "Installed Packages:"
          - "  ✓ tmux, vim, neovim, git, curl"
          - "  ✓ Python3, pip, and development tools"
          - "  ✓ Powerline fonts for vim-airline"
          - ""
          - "Dotfiles Configured:"
          - "  ✓ .bashrc, .bash_profile (custom prompt with git branch)"
          - "  ✓ .vimrc (with enhanced status line via vim-airline)"
          - "  ✓ .tmux.conf (with session persistence)"
          - ""
          - "Vim Plugins Installed:"
          - "  ✓ vim-airline (enhanced status line)"
          - "  ✓ NERDTree (file explorer - Ctrl+n)"
          - "  ✓ jedi-vim (Python autocomplete)"
          - "  ✓ black (Python formatter)"
          - "  ✓ syntastic (syntax checking)"
          - "  ✓ vim-fugitive (git integration)"
          - "  ✓ gruvbox & zenburn (color schemes)"
          - ""
          - "Tmux Plugins:"
          - "  ✓ tmux-resurrect (save/restore sessions)"
          - "  ✓ tmux-continuum (auto-save every 15 min)"
          - ""
          - "Next Steps:"
          - "  1. Run: source ~/.bashrc"
          - "  2. Restart tmux or run: tmux source ~/.tmux.conf"
          - "  3. Open vim to see enhanced status line!"
          - ""
          - "For tmux session restore after reboot: just run 'tmux'"
          - "=========================================="
